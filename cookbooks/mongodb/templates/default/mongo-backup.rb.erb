#!/usr/bin/env ruby

require 'rubygems'
require 'aws/s3'
require 'date'
require 'digest'
require 'net/http'
require 'fileutils'

module AWS
  class S3
    class S3Object
      def <=>(other)
        DateTime.parse(self.last_modified) <=> DateTime.parse(other.last_modified)
      end
    end
  end
end

AWS.config(access_key_id: '<%= @id_key %>', secret_access_key: '<%= @secret_key %>')
@s3 = AWS::S3.new

@databases = `mongo --quiet --eval "for (var x in db.adminCommand('listDatabases').databases) { if(db.adminCommand('listDatabases').databases[x].sizeOnDisk > 1) print(db.adminCommand('listDatabases').databases[x].name ); }" admin`.split("\n")
@ismaster = `mongo --quiet --eval 'printjson(db.runCommand("ismaster"))' | grep ismaster | awk '{print $3}'| sed s/,//`.strip
@environment = '<%= @env %>'
@app_name = '<%= @app_name %>'
@keep = 10 * @databases.length
@bucket = "ey-backup-#{Digest::SHA1.hexdigest('<%= @id_key %>')[0..11]}-mongo"
@tmpname = "#{Time.now.strftime("%Y-%m-%dT%H:%M:%S").gsub(/:/, '-')}"
FileUtils.mkdir_p '/mnt/tmp'
begin
  bucket = @s3.buckets.create(@bucket)
rescue AWS::S3::BucketAlreadyExists
end

if @ismaster == "false" #only dump non-primary nodes
  @databases.each do |database|
    token = "#{database}"
    mongocmd = "mongodump -h 127.0.0.1 -d #{database} -o /mnt/tmp/#{token}.#{@tmpname} && tar cjf \"/mnt/tmp/#{token}.#{@tmpname}.tar.bz\" \"/mnt/tmp/#{token}.#{@tmpname}\""
    if system(mongocmd)
      @s3.buckets[@bucket].objects["/#{@environment}.#{@app_name}/#{@app_name}-#{token}.#{@tmpname}.bson.tar.bz"].write(:file => open("/mnt/tmp/#{token}.#{@tmpname}.tar.bz"))
      FileUtils.rm "/mnt/tmp/#{token}.#{@tmpname}.tar.bz"
      FileUtils.rm_r "/mnt/tmp/#{token}.#{@tmpname}"
      puts "successful backup: #{database}.#{@tmpname}"
    else
      raise "Unable to dump database#{database} wtf?"
    end
  end

  backups = []
  backups << @s3.buckets[@bucket].objects.sort
  backups = backups.flatten.sort
  backups[0...-@keep].each do |object|
    puts "deleting: #{object.key}"
    object.delete
  end
end
